/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$google-name: 'google';
$google-x: 39px;
$google-y: 0px;
$google-offset-x: -39px;
$google-offset-y: 0px;
$google-width: 31px;
$google-height: 31px;
$google-total-width: 101px;
$google-total-height: 70px;
$google-image: '../images/sprite.png';
$google: (39px, 0px, -39px, 0px, 31px, 31px, 101px, 70px, '../images/sprite.png', 'google', );
$ok-name: 'ok';
$ok-x: 0px;
$ok-y: 39px;
$ok-offset-x: 0px;
$ok-offset-y: -39px;
$ok-width: 31px;
$ok-height: 31px;
$ok-total-width: 101px;
$ok-total-height: 70px;
$ok-image: '../images/sprite.png';
$ok: (0px, 39px, 0px, -39px, 31px, 31px, 101px, 70px, '../images/sprite.png', 'ok', );
$tw-name: 'tw';
$tw-x: 31px;
$tw-y: 39px;
$tw-offset-x: -31px;
$tw-offset-y: -39px;
$tw-width: 31px;
$tw-height: 31px;
$tw-total-width: 101px;
$tw-total-height: 70px;
$tw-image: '../images/sprite.png';
$tw: (31px, 39px, -31px, -39px, 31px, 31px, 101px, 70px, '../images/sprite.png', 'tw', );
$up-name: 'up';
$up-x: 0px;
$up-y: 0px;
$up-offset-x: 0px;
$up-offset-y: 0px;
$up-width: 39px;
$up-height: 39px;
$up-total-width: 101px;
$up-total-height: 70px;
$up-image: '../images/sprite.png';
$up: (0px, 0px, 0px, 0px, 39px, 39px, 101px, 70px, '../images/sprite.png', 'up', );
$vk-name: 'vk';
$vk-x: 70px;
$vk-y: 0px;
$vk-offset-x: -70px;
$vk-offset-y: 0px;
$vk-width: 31px;
$vk-height: 31px;
$vk-total-width: 101px;
$vk-total-height: 70px;
$vk-image: '../images/sprite.png';
$vk: (70px, 0px, -70px, 0px, 31px, 31px, 101px, 70px, '../images/sprite.png', 'vk', );
$spritesheet-width: 101px;
$spritesheet-height: 70px;
$spritesheet-image: '../images/sprite.png';
$spritesheet-sprites: ($google, $ok, $tw, $up, $vk, );
$spritesheet: (101px, 70px, '../images/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
